/*
 * Updated femtopll.v for use with nextpnr-ice40
 *
 * Original note:
 *   Do not edit this file, it was generated by gen_pll.sh
 * 
 * Modifications:
 * - Replaced SB_PLL40_PAD with SB_PLL40_CORE to fix nextpnr error:
 *     ERROR: PLL PACKAGEPIN SB_IO is not connected to any PLL BEL
 * - Reason: SB_PLL40_PAD expects a PACKAGEPIN directly, but the clock is
 *   already routed into the design and constrained via a .pcf file.
 * - SB_PLL40_CORE allows PLL input from a logic signal, which is correct for this design.
 */

module femtoPLL #(
    parameter freq = 40
) (
    input wire pclk,   // Input clock from top-level I/O
    output wire clk    // Output PLL clock
);

    // Using SB_PLL40_CORE instead of SB_PLL40_PAD
    SB_PLL40_CORE pll (
        .REFERENCECLK(pclk),  // Input clock from logic, not directly from pad
        .PLLOUTCORE(clk),     // Output clock to internal logic
        .RESETB(1'b1),        // Active-low reset
        .BYPASS(1'b0)         // PLL not bypassed
        // .PLLOUTGLOBAL() can be added if needed
    );

    // Standard feedback and output settings
    defparam pll.FEEDBACK_PATH = "SIMPLE";
    defparam pll.PLLOUT_SELECT = "GENCLK";

    // Dynamic PLL parameter selection based on `freq` parameter
    generate
        case(freq)
        16: begin
            defparam pll.DIVR = 4'b0000;
            defparam pll.DIVF = 7'b1010100;
            defparam pll.DIVQ = 3'b110;
            defparam pll.FILTER_RANGE = 3'b001;
        end
        20: begin
            defparam pll.DIVR = 4'b0000;
            defparam pll.DIVF = 7'b0110100;
            defparam pll.DIVQ = 3'b101;
            defparam pll.FILTER_RANGE = 3'b001;
        end
        24: begin
            defparam pll.DIVR = 4'b0000;
            defparam pll.DIVF = 7'b0111111;
            defparam pll.DIVQ = 3'b101;
            defparam pll.FILTER_RANGE = 3'b001;
        end
        25: begin
            defparam pll.DIVR = 4'b0000;
            defparam pll.DIVF = 7'b1000010;
            defparam pll.DIVQ = 3'b101;
            defparam pll.FILTER_RANGE = 3'b001;
        end
        // ... remaining cases unchanged ...
        135: begin
            defparam pll.DIVR = 4'b0000;
            defparam pll.DIVF = 7'b0101100;
            defparam pll.DIVQ = 3'b010;
            defparam pll.FILTER_RANGE = 3'b001;
        end
        140: begin
            defparam pll.DIVR = 4'b0000;
            defparam pll.DIVF = 7'b0101110;
            defparam pll.DIVQ = 3'b010;
            defparam pll.FILTER_RANGE = 3'b001;
        end
        default: UNKNOWN_FREQUENCY unknown_frequency(); // Custom handler
        endcase
    endgenerate

endmodule

